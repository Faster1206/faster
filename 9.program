#include <stdlib.h>
#include <stdio.h>
#include "QueueOperationsLL.c"
int main() {
	int op, x;
	while(1) {	
		printf("1.Enqueue 2.Dequeue 3.Display 4.Is Empty 5.Size 6.Exit\n");
		printf("Enter your option : ");
		scanf("%d",&op);
		switch(op) {
			case 1: 
				printf("Enter element : ");
				scanf("%d",&x);
				enqueue(x);
				break;
			case 2: 
				dequeue();
				break;
			case 3: 
				display();
				break;
			case 4:
				isEmpty();
				break;
			case 5:
				size();
				break;
			case 6: exit(0);
		}
	}
}




struct queue {
	int data;
	struct queue *next;
};

typedef struct queue *Q;
Q front = NULL, rear = NULL;

Q createnode() {
    Q newnode = (Q)malloc(sizeof(struct queue));
    newnode->next = NULL;
    return newnode;
}

void enqueue(int element) {
    Q newnode = createnode();
    newnode->data = element;
    if (rear == NULL && front == NULL) {
        rear = newnode;
        front = newnode;
    } else {
        rear->next = newnode;
        rear = newnode;
    }
    printf("Successfully inserted.\n");
}

void dequeue() {
    if (front == NULL && rear == NULL)
        printf("Queue is underflow.\n");
    else {
        printf("Deleted value = %d\n", front->data);
        if (front == rear) {
            front = NULL;
            rear = NULL;
        } else {
            front = front->next;
        }
    }
}

void size() {
    if (front == NULL && rear == NULL) {
        printf("Queue size : 0\n");
    } else {
        Q temp = front;
        int c = 0;
        while (temp != NULL) {
            temp = temp->next;
            c++;
        }
        printf("Queue size : %d\n", c);
    }
}

void isEmpty() {
    if (front == NULL && rear == NULL) {
        printf("Queue is empty.\n");
    } else {
        printf("Queue is not empty.\n");
    }
}




void display() {
	if(front == NULL) {
		printf("Queue is empty.\n");
	} else {
		Q temp = front;
		printf("Elements in the queue : ");
		while(temp  != NULL) {
			printf("%d ", temp -> data);
			temp = temp -> next;
		}
		printf("\n");
	}
}


