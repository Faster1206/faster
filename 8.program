#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>
#include "Infix2PostfixOperation.c"

int main() {
	char expr[20];
	char *e, x;
	printf("Enter the expression : ");
	scanf("%s",expr);
	e = expr;
	convertInfix(e);
	return 0;
}




#define STACK_MAX_SIZE 20
char stack [STACK_MAX_SIZE];
int top = -1;

//Return 1 if stack is empty else return 0.
int isEmpty() {
	if(top==-1) {
		return 1;
	}
	else {
		return 0;
	}
	
}
//Push the character into stack
void push(char x) {
	if(top==STACK_MAX_SIZE-1) {
		printf("Stack is overflow\n");
		exit(1);
	}
	else {
		stack[++top]=x;
	}
}

//pop a character from stack
char pop() {
	if(isEmpty())
	{
		return -1;
	}
	else {
		return stack[top--];
	}
	
}

// Return 0 if char is '('
// Return 1 if char is '+' or '-'
// Return 2 if char is '*' or '/' or '%'
int priority(char x) {
	if(x=='(')
		return 0;
	else if(x=='+' || x=='-')
		return 1;
	else if(x=='*'||x=='/'||x=='%')
		return 2;
	else
		return -1;
}

//Output Format
//if expression is correct then output will be Postfix Expression : <postfix notation>
//If expression contains invalid operators then output will be "Invalid symbols in infix expression. Only alphanumberic and { '+', '-','*', '%%', '/' } are allowed."
//If the expression contains unbalanced paranthesis the output will be "Invalid infix expression : unbalanced parenthesis."
void convertInfix(char * e) {
	char postfix[STACK_MAX_SIZE];
	int j=0;
	char c;
	for(int i=0;e[i]!='\0';i++)
		{
			c=e[i];
			if(isalnum(c))
				postfix[j++]=c;
			else if(c=='(')
				push(c);
			else if(c==')')
			{
				while(stack[top]!='(')
					postfix[j++]=pop();
				pop();
			}
			else if(c=='+'||c=='-'||c=='*'||c=='/'||c=='%')
				{
				while(priority(c)<=priority(stack[top]))
					postfix[j++]=pop();
				push(c);
				}
			else { 
			printf("Invalid symbols in infix expression. Only alphanumeric and { '+', '-','*', '%%', '/' } are allowed.\n");
			return; }
		}while(!isEmpty()) {
		if(stack[top]=='('){
			printf("Invalid infix expression : unbalanced parenthesis.\n");
			return;
		}
		postfix[j++]=pop();
		}
	postfix[j]='\0';
	printf("Postfix expression : %s\n",postfix);
}

